*장고 템플릿(template)

[ 장고의 코어 템플릿 엔진 ]

ㅁ DTL (Django Template Language) : 장고의 코어 템플릿 엔진

ㅁ jinja 템플릿 엔진도 기본적으로 지원하고 있음

ㅁ 이외에 다른 템플릿 엔진도 설치해서 사용할 수 있다.

[ 템플릿 엔진의 설정 ]

ㅁ 템플릿 엔진의 설정은 프로젝트 생성시 startproject 명령에 의해서 작성되는 파일 중에 settings.py에서 템플릿 설정을 할 수 있다.

    *settings.py에 template 설정 부분

        TEMPLATES = [
            {
        
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "DIRS": [],
                "APP_DIRS": True,
                "OPTIONS": {
                    "context_processors": [
                        "django.template.context_processors.debug",
                        "django.template.context_processors.request",
                        "django.contrib.auth.context_processors.auth",
                        "django.contrib.messages.context_processors.messages",
                    ],
                },
            },
        ]

        BACKEND : 사용할 템플릿 엔진을 지정
        * 장고에서 기본적으로 제공하는 템플릿 엔진 2가지
          - 장고 자체 템플릿 엔진:
            django.template.backends.django.DjangoTemplates
          
          - Jinja2 템플릿 엔진 : 파이썬 언어의 대표적인 템플릿 엔진
            해당 시스템에 Jinja2 라이브러리만 설치되어 있으면, 장고가 제공하는 설정이나 
            API등을 사용할 수 있다.

            django.template.backends.jinja2.Jinja2

        DIRS : 프로젝트 템플릿 파일이 위치한 디렉토리를 지정

        APP_DIRS : 앱의 템플릿 디렉토리에서 파일을 찾을 것인지 여부를 지정
                   디폴트는 False 이지만 startproject 명령에 의해서
                   settings.py 파일이 만들어질 때 True 설정된다.
        
        OPTIONS : 템플릿 엔진에 따라 해당하는 옵션들을 설정하는 항목이다.
            
            [ 장고 템플릿 엔진을 사용하는 경우의 옵션 항목 ]

            - context_processors : 웹 요청에 들어 있는 파라미터들(request)을 
            인자로 받아서 컨텍스트 데이터로 사용될 dict을 만들어주는 호출 가능한 
            객체를 지정한다. 디폴트는 비어있는 리스트 

            - debug : 템플릿 디버그 모드를 설정. True로 설정하면 템플릿을 
            렌더링하는 과정에서 에러가 발생하면 템플릿 파일 내에서 에러가 
            발생한 라인을 다른 색으로 표시해준다.

            - loaders : 템플릿 로더 클래스를 지정한다. 로더는 템플릿 파일을
            찾아서 메모리에 로딩하는 역할을 수행한다.

            - string_if_invalid : 템플릿 변수 잘못된 경우에 대신 사용할 문자열을 지정
            디폴트는 공백 문자열

            - file_charset : 템플릿 파일을 읽어 디코딩할 때 사용하는 문자셋을 지정

[   템플릿의 내부 처리 과정 ]

ㅁ 장고 내부에서 동작하는 템플릿 처리 과정은 크게 3가지 단계로 구분할 수 있다.

    1. 템플릿 설정에 따라 ENGINE객체를 생성
    2. 템플릿 파일 로딩 및 Template 객체를 생성
    3. 렌더링을 실시해서 최종 HTML 텍스트 파일을 생성


     - 각 단계별 세부사항
       -- Engine 객체 생성 시에 사용하는 인자들이 TEMPLATES 설정 항목에 지정된 
       값들이다.
       Engine객체 생성 단계는 Engine객체 뿐만 아니라 그 Engine에 속해있는 Loader 객체도 같이 생성된다. 
       2단계에서 Loader 객체가 동작을 하여 템플릿 파일 검색 작업이 수행된다.

       -- Engine 객체에 지정된 템플릿 로더(Loader)는 하나 또는 여러개로 나눠진 템플릿 파일들을 찾아서
       하나로 모아 TEMPLATES객체를 생성
       템플릿 설정 옵션 항목에 loaders가 지정되지 않은 경우, 디폴트 로더 2개(클래스)를 사용한다.
       이 2개의 로더 이외에 캐시 로더 또는 개발자가 만든 커스텀 로더등을 사용하는 것도 가능하다.
       하지만 특별한 경우가 아니라면 디폴트 로더 2개를 사용하는 것이 일반적인 방법이다.

       ** 2개의 디폴트 로더 **
       django.template.loaders.filesystem.Loader :
       템플릿 파일을 찾기 위해, 설정 항목 TEMPLATES의 DIRS 항목에 지정도 디렉토리를 검색한다.
       DIRS 항목이 비어있는 경우에는 로더는 검색을 수행하지 않는다.

       django.template.loaders.app_directories.Loader : 템플릿 파일을 찾기 위해 각 앱 디렉토리 하위에 있는 
       TEMPLATE/디렉토리를 검색한다. 애플리케이션은 settings.py의 INSTALL_APPS 설정 항목에 등록된 앱들이 대상이 된다.
       이 로더는 template 설정 항목중에 APPS_DIR 항목이 True인 경우에만 동작한다.

       이 단계에서 Loader 객체가 템플릿 파일들을 찾은 후에 Template 객체를 생성한다.
       찾은 템플릿 파일들의 템플릿 코드들을 하나로 모아서 Template 객체 생성자에 전달한다.
       템플릿 파일을 찾은 결과는 보통 하나의 파일인데, {% extends %} 또는 {% include %}
       태그가 있는 경우는 여러 개의 파일을 찾게 된다.

       이렇게 찾아서 생성된 Template 객체는 3단계에서 사용된다.
       
       --Template 객체의 Render() 메소드를 호출해서 컨텍스트 데이터와 요청(Request)
       데이터들을 템플릿 코드에 대입하고 렌더링 결과 최종 텍스트 파일을 만든다.

       랜더링을 위해서는 템플릿 코드와 컨텍스트 데이터가 필요하다. 템플릿 코드는 2단계에서 만들어지고,
       컨텍스트 데이터는 뷰함수에서 만들어져서 템플릿 시스템으로 전달된다. 웹 요청 객체 HttpRequest 객체에
       들어있는 데이터도 필요한데 이 데이터도 컽텍스트 데이터로 사용된다.

       뷰에서 전달된 데이터만으로 최종 컨텍스트 데이터를 만들 때는 context객체를 사용하고, HttpRequest 데이터를
       포함해서 최종 컨텍스트 데이터를 만들 때는 RequestContext객체를 사용한다.

       HttpRequest 객체에는 여러 데이터가 포함 되어 있다. 이 중에서 어떤 데이터를 컨텍스트 데이터로 사용할 지 결정하는
       기준은 바로 템플릿 엔진 설정항목(17줄)의 context_processors 옵션 항목. startproject 명령으로 프로젝트 생성시에
       4가지 컨텍스트 프로세서가 지정된다

       - django.template.context_processors.debug : 현재 실행환경의 DEBUG모드를 가리키는 debug변수 및 웹 요청처리 과정에 사용된
       SQL 쿼리 정보들을 담은 sql_queries 변수, 2가지가 최종 컨텍스트 데이터에 추가

       - django.template.context_processors.request : 현재 요청의 HttpRequest를 가리키는 request 변수가 최종 컨텍스트 데이터에 추가

       - Django.template.context_processors.auth : 로그인 사용자를 지칭하는 user 변수 및 그 사용자의 권한을 지칭하는 perms 변수가 
       최종 컨텍스트 데이터에 추가  
       
       - django.template.context_processors.messages : 메세지 리스트를 가리키는 messages 변수와 메세지 레벨을 가리키는 
       DEFAULT_MESSAGE_LEVELS변수가 최종 컨텍스트 데이터에 추가

       ** RequestContext 객체가 생성될 때는, 위 4개의 컨텍스트 프로세서 이외에도 CSRF(Cross Site Request Forgery) 
       보안 공격을 방지하기 위한 프로 세서가 자동으로 추가된다.

       -django.template.context_processors.csrf:{% csrf_token %}
       템플릿 태그처리에 필요한 토큰이 최종 컨텍스트 데이터에 추가


** 렌더링 : Template 객체를 이용해서 최종 html 텍스트를 만드는 과정이다. 
(템플릿 코드가 담겨있는 Template 객체가 생성된 후, 템플릿 코드에 포함된
변수들을 그에 맞는 데이터로 치환해서 최종 텍스트를 만드는 과정)


[장고 템플릿 문법 사항]

ㅁ 변수는 {{변수}} : 변수명은 영문자와 _밑줄로 구성(공백이나 특수문자 사용불가)
ㅁ "."은 변수의 속성에 접근할 때 사용
    템플릿 시스템에서 "."을 만나면, 다음과 같은 순서로 조회를 시도한다.
    사전(dict) 조회, 속성조회, 메소드호출 , 리스트-인덱스 조회

ㅁ 필터를 사용하여 변수를 표시하는데 변화를 줄 수 있다.
    예> {{name | lower }} : 의 의미는 {{name}} 변수에 lower필터를 적용 시켜서,
        텍스트를 소문자로 전환하여 결과를 출력한다. 필터기호는 파이프(|)를 사용한다.
        필터는 연속하여 사용 가능하다.
        {{ text | escape | linebreaks}}
        {{ aaa | truncatewords:20}}aaa라는 변수안에 단어중 20개의 단어를 가져오겠다.
        {{ list | join:", "}} 